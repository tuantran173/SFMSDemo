// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFMSSolution.Infrastructure.Database.AppDbContext;

#nullable disable

namespace SFMSSolution.Infrastructure.Migrations
{
    [DbContext(typeof(SFMSDbContext))]
    [Migration("20250321135512_seedData")]
    partial class seedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.BookingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("BookingSchedules", (string)null);
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1234567-1234-1234-1234-1234567890ab"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2292),
                            Description = "Sân bóng đá 5-a-side, 7-a-side, 11-a-side",
                            Name = "Sân bóng"
                        },
                        new
                        {
                            Id = new Guid("b1234567-1234-1234-1234-1234567890bc"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2294),
                            Description = "Sân cầu lông đơn và đôi",
                            Name = "Sân cầu lông"
                        },
                        new
                        {
                            Id = new Guid("c1234567-1234-1234-1234-1234567890cd"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2296),
                            Description = "Sân Pickleball chuẩn quốc tế",
                            Name = "Sân Pickleball"
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f34c777a-fa4b-4ed1-bc22-29570a01d7d9"),
                            Capacity = "10",
                            CategoryId = new Guid("a1234567-1234-1234-1234-1234567890ab"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2402),
                            Description = "Sân bóng đá 5 người",
                            Images = "image1.jpg",
                            Location = "Thạch Thất, Hòa Lạc",
                            Name = "Football Field 5-a-side"
                        },
                        new
                        {
                            Id = new Guid("9eefd023-7cc3-428f-b96d-3e0430394391"),
                            Capacity = "4",
                            CategoryId = new Guid("b1234567-1234-1234-1234-1234567890bc"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2404),
                            Description = "Sân cầu lông đơn/đôi",
                            Images = "image2.jpg",
                            Location = "Thạch Thất, Hòa Lạc",
                            Name = "Badminton Court 1"
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.FacilityPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("FacilityTimeSlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityTimeSlotId");

                    b.ToTable("FacilityPrices", (string)null);
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.FacilityTimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsWeekend")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("FacilityTimeSlots", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b05b57c-6d02-4c06-b0b5-a96139825346"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2556),
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            FacilityId = new Guid("f34c777a-fa4b-4ed1-bc22-29570a01d7d9"),
                            IsWeekend = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("907b662c-5a2c-4a90-b96b-81b603b27e57"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2558),
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            FacilityId = new Guid("f34c777a-fa4b-4ed1-bc22-29570a01d7d9"),
                            IsWeekend = false,
                            StartTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1a2c6a93-97cd-4493-a1fc-9b5819ac6e17"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2559),
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            FacilityId = new Guid("f34c777a-fa4b-4ed1-bc22-29570a01d7d9"),
                            IsWeekend = false,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d75d092a-7da6-4cc3-88c9-69ac5c82652c"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2561),
                            EndTime = new TimeSpan(0, 15, 30, 0, 0),
                            FacilityId = new Guid("f34c777a-fa4b-4ed1-bc22-29570a01d7d9"),
                            IsWeekend = false,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1b7ea0d1-c743-47d7-b3f1-02860dbd9806"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2563),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            FacilityId = new Guid("f34c777a-fa4b-4ed1-bc22-29570a01d7d9"),
                            IsWeekend = false,
                            StartTime = new TimeSpan(0, 15, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("bb9299e1-518a-4730-9797-6ec37c5dd03f"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2564),
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            FacilityId = new Guid("9eefd023-7cc3-428f-b96d-3e0430394391"),
                            IsWeekend = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b03366d1-b1cc-4c0e-8e61-6fff1651755d"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2569),
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            FacilityId = new Guid("9eefd023-7cc3-428f-b96d-3e0430394391"),
                            IsWeekend = false,
                            StartTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ffa61f3b-58a0-4881-ae97-61332f81fc4f"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2571),
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            FacilityId = new Guid("9eefd023-7cc3-428f-b96d-3e0430394391"),
                            IsWeekend = false,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("957c4719-4bca-4ce0-9b55-ced6573f76d2"),
                            BasePrice = 400000m,
                            CategoryId = new Guid("a1234567-1234-1234-1234-1234567890ab"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2486)
                        },
                        new
                        {
                            Id = new Guid("19a0d469-93c9-4158-be0b-daf94107cb46"),
                            BasePrice = 200000m,
                            CategoryId = new Guid("b1234567-1234-1234-1234-1234567890bc"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(2488)
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6bf8ddbb-4aac-40fb-8972-c91718401175"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 426, DateTimeKind.Utc).AddTicks(4073),
                            Name = "Admin",
                            RoleCode = "AD",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1db2efa1-303b-41da-9c63-6753506ddc49"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 426, DateTimeKind.Utc).AddTicks(4075),
                            Name = "Customer",
                            RoleCode = "CUS",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("86a13262-7fca-4b0f-b3f0-d28c48133034"),
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 426, DateTimeKind.Utc).AddTicks(4077),
                            Name = "Owner",
                            RoleCode = "OWN",
                            Status = 1
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0a84411-fa51-454f-ad67-c70077f3bc31"),
                            Address = "System Address",
                            AvatarUrl = "",
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 533, DateTimeKind.Utc).AddTicks(5405),
                            Email = "admin@gmail.com",
                            FullName = "System Admin",
                            Gender = 1,
                            PasswordHash = "$2a$10$eElydbMFNVXA8pYeif4j.Om9GTqiU7Ys0aM3eyMeeD8Wdy0s2beH2",
                            Phone = "0123456789",
                            RoleId = new Guid("6bf8ddbb-4aac-40fb-8972-c91718401175"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99d3b346-bd2a-4862-98c2-b7b07fef4ba8"),
                            Address = "Thạch Thất, Hòa Lạc",
                            AvatarUrl = "",
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 644, DateTimeKind.Utc).AddTicks(2701),
                            Email = "owner@gmail.com",
                            FullName = "John Doe",
                            Gender = 1,
                            PasswordHash = "$2a$10$WFL7Y3UvKS0Gks/pRHWB7.Aj.D8IhPUpv.S0Wbl1Fy60Vzdc1nQfq",
                            Phone = "0987654321",
                            RoleId = new Guid("86a13262-7fca-4b0f-b3f0-d28c48133034"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9fed27f3-895c-4f42-8baf-7497f24bbbfe"),
                            Address = "Thạch Thất, Hòa Lạc",
                            AvatarUrl = "",
                            CreatedDate = new DateTime(2025, 3, 21, 13, 55, 9, 753, DateTimeKind.Utc).AddTicks(1830),
                            Email = "customer@gmail.com",
                            FullName = "Jane Smith",
                            Gender = 2,
                            PasswordHash = "$2a$10$QZwD.wt54qB53EgSOI0DnucKntwRMWJf4rY9kHJh.cZ/y88xrzCbO",
                            Phone = "0123987654",
                            RoleId = new Guid("1db2efa1-303b-41da-9c63-6753506ddc49"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Booking", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFMSSolution.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.BookingSchedule", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Facility", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.FacilityPrice", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.FacilityTimeSlot", "FacilityTimeSlot")
                        .WithMany()
                        .HasForeignKey("FacilityTimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityTimeSlot");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.FacilityTimeSlot", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Price", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.User", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SFMSSolution.Domain.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.User", b =>
                {
                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
