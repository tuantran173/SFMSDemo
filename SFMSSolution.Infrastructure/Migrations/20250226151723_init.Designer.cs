// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFMSSolution.Infrastructure.Database.AppDbContext;

#nullable disable

namespace SFMSSolution.Infrastructure.Migrations
{
    [DbContext(typeof(SFMSDbContext))]
    [Migration("20250226151723_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b0cafdc-c84c-4474-be38-14be5e5cb002"),
                            BookingDate = new DateTime(2025, 2, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 765, DateTimeKind.Utc).AddTicks(8140),
                            EndTime = new DateTime(2025, 2, 27, 11, 0, 0, 0, DateTimeKind.Utc),
                            FacilityId = new Guid("ada9093b-0b25-4afd-9b2f-efc760aed770"),
                            StartTime = new DateTime(2025, 2, 27, 9, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Pending",
                            UserId = new Guid("a377cd0a-560f-4182-a046-903fa0b04434")
                        },
                        new
                        {
                            Id = new Guid("ef5dac8e-39b7-4388-83b8-604a47729b46"),
                            BookingDate = new DateTime(2025, 2, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 765, DateTimeKind.Utc).AddTicks(8147),
                            EndTime = new DateTime(2025, 2, 27, 16, 0, 0, 0, DateTimeKind.Utc),
                            FacilityId = new Guid("637e671f-6ea1-4e4e-aa7c-5fdd1db1b10f"),
                            StartTime = new DateTime(2025, 2, 27, 14, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Confirmed",
                            UserId = new Guid("dff0783d-10b7-4aa9-9fdc-364591a7c45b")
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ada9093b-0b25-4afd-9b2f-efc760aed770"),
                            Capacity = "22",
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 765, DateTimeKind.Utc).AddTicks(8074),
                            Description = "Sân bóng cỏ tự nhiên với trang thiết bị hiện đại.",
                            Images = "/uploads/facilities/sanh_bong_a.jpg",
                            Location = "Thôn 3, Thạch Hòa, Thạch Thất, Hà Nội",
                            Name = "Sân bóng",
                            Price = 500m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = new Guid("637e671f-6ea1-4e4e-aa7c-5fdd1db1b10f"),
                            Capacity = "4",
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 765, DateTimeKind.Utc).AddTicks(8077),
                            Description = "Sân cầu lông trong nhà, điều hòa, thích hợp cho giải đấu.",
                            Images = "/uploads/facilities/sanh_tennis_b.jpg",
                            Location = "Thôn 3, Thạch Hòa, Thạch Thất, Hà Nội",
                            Name = "Sân cầu lông",
                            Price = 300m,
                            Status = "Under Maintenance"
                        },
                        new
                        {
                            Id = new Guid("cae13754-8328-4ffa-a092-1822ff6c3c70"),
                            Capacity = "30",
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 765, DateTimeKind.Utc).AddTicks(8079),
                            Description = "Sân Pickleball hiện đại với trang thiết bị hiện đại.",
                            Images = "/uploads/facilities/phong_gym_c.jpg",
                            Location = "Thôn 3, Thạch Hòa, Thạch Thất, Hà Nội",
                            Name = "Sân Pickleball",
                            Price = 100m,
                            Status = "Closed"
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06324a24-cb26-4452-a3b8-731e1b980e5f"),
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 430, DateTimeKind.Utc).AddTicks(4684),
                            Name = "Admin",
                            RoleCode = "AD",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dc8b1c2b-91b6-4160-b93e-d5a3b24d8f5d"),
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 430, DateTimeKind.Utc).AddTicks(4699),
                            Name = "Facility Owner",
                            RoleCode = "FO",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ca39c26a-406e-424b-bab0-389b6efe38ed"),
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 430, DateTimeKind.Utc).AddTicks(4701),
                            Name = "Customer",
                            RoleCode = "CUS",
                            Status = 1
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a377cd0a-560f-4182-a046-903fa0b04434"),
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 541, DateTimeKind.Utc).AddTicks(1912),
                            Deleted = false,
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            Gender = 1,
                            PasswordHash = "$2a$10$KgCro0Swuxx8Qlu5iIkET..OSuyVZ4D0LuE3MDi0dsDfHDaotgYPi",
                            Phone = "0974209212",
                            RefreshToken = "",
                            ResetPasswordToken = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("17123670-e7fc-4656-932d-1d2525e9c1c0"),
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 652, DateTimeKind.Utc).AddTicks(4499),
                            Deleted = false,
                            Email = "owner@gmail.com",
                            FullName = "Facility Owner",
                            Gender = 2,
                            PasswordHash = "$2a$10$k0V3eqD4C2Bd8bMWz3Ujt.bKCm3c4.0.YJVU.rqIv1qHiTt1y40Ke",
                            Phone = "0987654321",
                            RefreshToken = "",
                            ResetPasswordToken = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dff0783d-10b7-4aa9-9fdc-364591a7c45b"),
                            CreatedDate = new DateTime(2025, 2, 26, 15, 17, 20, 765, DateTimeKind.Utc).AddTicks(7439),
                            Deleted = false,
                            Email = "customer@gmail.com",
                            FullName = "Customer",
                            Gender = 1,
                            PasswordHash = "$2a$10$dZ1POxZrYHlIltD4X0g2/OQD4qX.G4/6yduRDy0LhNIqJWcT9zx0W",
                            Phone = "0112233445",
                            RefreshToken = "",
                            ResetPasswordToken = "",
                            Status = 1
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a377cd0a-560f-4182-a046-903fa0b04434"),
                            RoleId = new Guid("06324a24-cb26-4452-a3b8-731e1b980e5f")
                        },
                        new
                        {
                            UserId = new Guid("17123670-e7fc-4656-932d-1d2525e9c1c0"),
                            RoleId = new Guid("dc8b1c2b-91b6-4160-b93e-d5a3b24d8f5d")
                        },
                        new
                        {
                            UserId = new Guid("dff0783d-10b7-4aa9-9fdc-364591a7c45b"),
                            RoleId = new Guid("ca39c26a-406e-424b-bab0-389b6efe38ed")
                        });
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Booking", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFMSSolution.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.User", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("SFMSSolution.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFMSSolution.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SFMSSolution.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
